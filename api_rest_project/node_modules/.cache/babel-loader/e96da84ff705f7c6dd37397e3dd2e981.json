{"ast":null,"code":"var _jsxFileName = \"F:\\\\React-redux-progects\\\\api_rest_project\\\\src\\\\components\\\\random-planet\\\\random-planet.js\";\nimport React from 'react';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\nimport Spinner from '../spinner/spinner';\nimport ErrorIndicator from '../error-indicator/error-indicator';\nexport default class RandomPlanet extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.swapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true,\n      error: false\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false\n      });\n    };\n\n    this.onError = err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 25) + 3;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clear;\n  }\n\n  render() {\n    const {\n      planet,\n      loading,\n      error\n    } = this.state;\n    const hasDate = !(loading || error);\n    const errorMesege = error ? React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }) : null;\n    const spinner = loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }) : null;\n    const content = hasDate ? React.createElement(PlanetView, {\n      planet: planet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, errorMesege, spinner, content);\n  }\n\n}\n\nconst PlanetView = ({\n  planet\n}) => {\n  const {\n    name,\n    population,\n    rotationPeriod,\n    diameter,\n    id\n  } = planet;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, diameter)))));\n};","map":{"version":3,"sources":["F:/React-redux-progects/api_rest_project/src/components/random-planet/random-planet.js"],"names":["React","SwapiService","Spinner","ErrorIndicator","RandomPlanet","Component","swapiService","state","planet","loading","error","onPlanetLoaded","setState","onError","err","updatePlanet","id","Math","floor","random","getPlanet","then","catch","componentDidMount","interval","setInterval","componentWillUnmount","clear","render","hasDate","errorMesege","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport  SwapiService from '../../services/swapi-service'\r\nimport './random-planet.css';\r\nimport Spinner from '../spinner/spinner'\r\nimport ErrorIndicator from '../error-indicator/error-indicator'\r\n\r\nexport default class RandomPlanet extends React.Component {\r\n\r\n    swapiService = new SwapiService()\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true,\r\n        error: false\r\n        \r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, 10000)\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        clear\r\n    }\r\n\r\n    \r\n    onPlanetLoaded = (planet)=>{\r\n        this.setState({\r\n            planet,\r\n            loading:false})\r\n    }\r\n\r\n    onError = (err) => {\r\n        this.setState({ \r\n            error: true,\r\n            loading: false})\r\n    }\r\n\r\n    updatePlanet  = () => {\r\n        const id = Math.floor(Math.random()*25) + 3;\r\n        this.swapiService\r\n            .getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError)\r\n    }\r\n\r\nrender() {\r\n    \r\n    const   {planet, loading, error} = this.state        \r\n\r\n    const hasDate = !(loading || error);\r\n\r\n    const errorMesege = error ? <ErrorIndicator/> : null\r\n    const spinner = loading ?  <Spinner/> : null;\r\n    const content = hasDate ? <PlanetView planet={planet}/> : null;\r\n\r\n\r\n    return (\r\n    <div className=\"random-planet jumbotron rounded\">\r\n        {errorMesege}\r\n        {spinner}\r\n        {content}\r\n    </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst PlanetView = ({planet}) => {\r\n\r\n    const   {name, population, rotationPeriod,\r\n                        diameter, id } = planet\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"planet-image\"\r\n            src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\r\n        <div>\r\n            <h4>{name}</h4>\r\n            <ul className=\"list-group list-group-flush\">\r\n                <li className=\"list-group-item\">\r\n                    <span className=\"term\">Population</span>\r\n                    <span>{population}</span>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    <span className=\"term\">Rotation Period</span>\r\n                    <span>{rotationPeriod}</span>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    <span className=\"term\">Diameter</span>\r\n                    <span>{diameter}</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}