{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResource(`/people/`);\n    return res.results;\n  }\n\n  getPerson(id) {\n    return this.getResource(`/people/${id}/`);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet;\n  }\n\n  async getAllStarships() {\n    const res = await this.getResource(`/starships/`);\n    return res.results;\n  }\n\n  getStarship(id) {\n    return this.getResource(`/starships/${id}/`);\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/; // регулярка записывается между двуя прямыми слэшами regex101.com\n\n    return item.url.match(idRegExp)[1]; // первая группа [0-9] , нулевая была бы вся \n  }\n\n  _transformPlanet(planet) {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}","map":{"version":3,"sources":["F:/React-redux-progects/api_rest_project/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","getPerson","id","getAllPlanets","map","_transformPlanet","getPlanet","planet","getAllStarships","getStarship","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","eyeColor"],"mappings":"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","sourcesContent":["export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.co/api';\r\n\r\n    async getResource(url) {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n  \r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch ${url}` +\r\n        `, received ${res.status}`)\r\n    }\r\n    return await res.json();\r\n    }\r\n  \r\n    async getAllPeople() {\r\n      const res = await this.getResource(`/people/`);\r\n      return res.results;\r\n    }\r\n  \r\n    getPerson(id) {\r\n      return this.getResource(`/people/${id}/`);\r\n    }\r\n  \r\n    async getAllPlanets() {\r\n      const res = await this.getResource(`/planets/`);\r\n      return res.results.map(this._transformPlanet)\r\n    }\r\n  \r\n    async getPlanet(id) {\r\n        const planet = await this.getResource(`/planets/${id}/`);\r\n        return this._transformPlanet\r\n    }\r\n  \r\n    async getAllStarships() {\r\n      const res = await this.getResource(`/starships/`);\r\n      return res.results;\r\n    }\r\n\r\n    getStarship(id) {\r\n        return this.getResource(`/starships/${id}/`);\r\n    }\r\n    \r\n\r\n    _extractId(item){\r\n        const idRegExp = /\\/([0-9]*)\\/$/; // регулярка записывается между двуя прямыми слэшами regex101.com\r\n        return item.url.match(idRegExp)[1]; // первая группа [0-9] , нулевая была бы вся \r\n    }\r\n\r\n    _transformPlanet(planet) {\r\n        return {\r\n                id: this._extractId(planet),\r\n                name: planet.name,\r\n                population: planet.population,\r\n                rotationPeriod: planet.rotation_period,\r\n                diameter: planet.diameter\r\n        }\r\n    }\r\n\r\n    _transformStarship(starship) {\r\n        return {\r\n        id: this._extractId(starship),\r\n        name: starship.name,\r\n        model: starship.model,\r\n        manufacturer: starship.manufacturer,\r\n        costInCredits: starship.costInCredits,\r\n        length: starship.length,\r\n        crew: starship.crew,\r\n        passengers: starship.passengers,\r\n        cargoCapacity: starship.cargoCapacity\r\n        }\r\n      }\r\n    \r\n    _transformPerson(person) {\r\n        return {\r\n        id: this._extractId(person),\r\n        name: person.name,\r\n        gender: person.gender,\r\n        birthYear: person.birthYear,\r\n        eyeColor: person.eyeColor\r\n        }\r\n    }\r\n}\r\n  "]},"metadata":{},"sourceType":"module"}