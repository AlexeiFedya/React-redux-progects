{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.costInCredits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargoCapacity\n      };\n    };\n  }\n\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResource(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}","map":{"version":3,"sources":["F:/React-redux-progects/api_rest_project/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","_transformPlanet","planet","id","_extractId","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","person","getAllPlanets","getPlanet","getAllStarships","getStarship","item","idRegExp","match","gender","birthYear","eyeColor"],"mappings":"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","sourcesContent":["export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.co/api';\r\n\r\n    async getResource(url) {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch ${url}` +\r\n        `, received ${res.status}`)\r\n    }\r\n    return await res.json();\r\n    }\r\n\r\n    async getAllPeople() {\r\n    const res = await this.getResource(`/people/`);\r\n    return res.results.map(this._transformPerson);\r\n    }\r\n\r\n    async getPerson(id) {\r\n    const person = await this.getResource(`/people/${id}/`);\r\n    return this._transformPerson(person);\r\n    }\r\n\r\n    async getAllPlanets() {\r\n    const res = await this.getResource(`/planets/`);\r\n    return res.results.map(this._transformPlanet);\r\n    }\r\n\r\n    async getPlanet(id) {\r\n    const planet = await this.getResource(`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n    }\r\n\r\n    async getAllStarships() {\r\n    const res = await this.getResource(`/starships/`);\r\n    return res.results.map(this._transformStarship);\r\n    }\r\n\r\n    async getStarship(id) {\r\n    const starship = this.getResource(`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n    }\r\n\r\n    _extractId(item) {\r\n    const idRegExp = /\\/([0-9]*)\\/$/;\r\n    return item.url.match(idRegExp)[1];\r\n    }\r\n\r\n    _transformPlanet= (planet) => {\r\n    return {\r\n        id: this._extractId(planet),\r\n        name: planet.name,\r\n        population: planet.population,\r\n        rotationPeriod: planet.rotation_period,\r\n        diameter: planet.diameter\r\n    };\r\n    }\r\n\r\n    _transformStarship = (starship) => {\r\n    return {\r\n        id: this._extractId(starship),\r\n        name: starship.name,\r\n        model: starship.model,\r\n        manufacturer: starship.manufacturer,\r\n        costInCredits: starship.costInCredits,\r\n        length: starship.length,\r\n        crew: starship.crew,\r\n        passengers: starship.passengers,\r\n        cargoCapacity: starship.cargoCapacity\r\n    }\r\n    }\r\n\r\n    _transformPerson(person) {\r\n    return {\r\n        id: this._extractId(person),\r\n        name: person.name,\r\n        gender: person.gender,\r\n        birthYear: person.birthYear,\r\n        eyeColor: person.eyeColor\r\n    }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}