{"ast":null,"code":"const initialState = {\n  bookList: {\n    books: [],\n    loading: true,\n    error: null\n  },\n  shoppingCart: {\n    cartItems: [],\n    orderTotal: 0\n  }\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n  if (item.count === 0) {\n    return [...cartItems.slice(0, idx), ...cartItems.slice(idx + 1)];\n  }\n\n  if (idx === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const {\n    id = book.id,\n    count = 0,\n    title = book.title,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  }; // if (item) {\n  //     return {\n  //         ...item,\n  //         count: item.count + 1,\n  //         total: item.total + book.price\n  //     }\n  // } else {\n  //     return {\n  //         id: book.id,\n  //         title: book.title,\n  //         count: 1,\n  //         total: book.price\n  //     }\n  // }\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const {\n    shoppingCart: {\n      cartItems\n    },\n    bookList: {\n      books\n    }\n  } = state;\n  const book = books.find(book => book.id === bookId);\n  const itemIndex = cartItems.findIndex(book => book.id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return {\n    orderTotal: 220,\n    cartItems: updateCartItems(cartItems, newItem, itemIndex)\n  };\n};\n\nconst updateBookList = (state, action) => {\n  if (state === undefined) {\n    return {\n      books: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.bookList;\n  }\n};\n\nconst updateShoppingCart = (state, action) => {\n  if (state === undefined) {}\n\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n\n    case 'BOOK_REMOVED_FROM_CART':\n      return updateOrder(state, action.payload, -1);\n\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      const item = state.shoppingCart.cartItems.find(({\n        id\n      }) => id === action.payload);\n      return updateOrder(state, action.payload, -item.count);\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nconst reducer = (state, action) => {\n  console.log(action.type);\n  return {\n    bookList: updateBookList(state, action),\n    shoppingCart: updateShoppingCart(state, action)\n  };\n};\n\nexport default reducer; // case 'FETCH_BOOKS_REQUEST':\n//     return {\n//         ...state, // copy this current state and change other  \n//         books: [],\n//         loading: true,\n//         error: null\n//     };\n// case 'FETCH_BOOKS_SUCCESS':\n//     return {\n//         ...state,\n//         books: action.payload,\n//         loading: false,\n//         error: null\n//     };\n// case 'FETCH_BOOKS_FAILURE':\n//     return {\n//         ...state,\n//         books: [],\n//         loading: false,\n//         error: action.payload\n//     }  \n// case'BOOK_ADDED_TO_CART':\n// return  (\n//     updateOrder(state, action.payload, 1)\n// )\n// const bookId = action.payload;\n// const book = state.books.find((book) => book.id === bookId);\n// const itemIndex = state.cartItems.findIndex((book) => book.id === bookId)\n// const item = state.cartItems[itemIndex]\n// const newItem =  updateCartItem (book, item)\n//     return {\n//         ...state,\n//         cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\n//     }\n// case'BOOK_REMOVED_FROM_CART':\n// return (\n//     updateOrder(state, action.payload, -1)\n// )\n// case'ALL_BOOKS_REMOVED_FROM_CART':\n// const item = state.cartItems.find((book) => book.id === action.payload)\n// return (\n//     updateOrder(state, action.payload, -item.count)\n// )","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/reducers/reducer.js"],"names":["initialState","bookList","books","loading","error","shoppingCart","cartItems","orderTotal","updateCartItems","item","idx","count","slice","updateCartItem","book","quantity","id","title","total","price","updateOrder","state","bookId","find","itemIndex","findIndex","newItem","updateBookList","action","undefined","type","payload","updateShoppingCart","reducer","console","log"],"mappings":"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","sourcesContent":["const initialState = {\r\n    bookList: {\r\n        books: [],\r\n        loading: true,\r\n        error: null,\r\n    },\r\n\r\n    shoppingCart: {\r\n        cartItems: [],\r\n        orderTotal: 0\r\n    }\r\n};\r\n\r\nconst updateCartItems = (cartItems, item, idx) => {\r\n    \r\n    if (item.count === 0){\r\n        return [\r\n            ...cartItems.slice(0,idx),\r\n            ...cartItems.slice(idx + 1)\r\n        ]\r\n    }\r\n\r\n    if (idx === -1){\r\n        return [\r\n            ...cartItems,\r\n            item\r\n        ]\r\n    }\r\n\r\n    return [\r\n        ...cartItems.slice(0,idx),\r\n        item,\r\n        ...cartItems.slice(idx + 1)\r\n    ]\r\n}\r\n\r\nconst updateCartItem = (book, item = {}, quantity) => {\r\n\r\n    const {\r\n        id = book.id, \r\n        count = 0,\r\n        title = book.title,\r\n        total = 0\r\n    } = item;\r\n\r\n    return {\r\n        id,\r\n        title,\r\n        count: count + quantity,\r\n        total: total + quantity*book.price\r\n    }\r\n\r\n            // if (item) {\r\n            //     return {\r\n            //         ...item,\r\n            //         count: item.count + 1,\r\n            //         total: item.total + book.price\r\n            //     }\r\n            // } else {\r\n            //     return {\r\n            //         id: book.id,\r\n            //         title: book.title,\r\n            //         count: 1,\r\n            //         total: book.price\r\n            //     }\r\n            // }\r\n}\r\n\r\nconst updateOrder = (state, bookId, quantity) => {\r\n\r\n    const { shoppingCart: {cartItems}, bookList: {books} } = state\r\n            const book = books.find((book) => book.id === bookId);\r\n            const itemIndex = cartItems.findIndex((book) => book.id === bookId)\r\n            const item = cartItems[itemIndex]\r\n            \r\n            const newItem =  updateCartItem (book, item, quantity)\r\n            \r\n                return {\r\n                    orderTotal: 220,\r\n                    cartItems: updateCartItems(cartItems, newItem, itemIndex)\r\n                }\r\n}\r\n\r\nconst updateBookList = (state, action) => {\r\n\r\n    if (state === undefined){\r\n        return {\r\n            books: [],\r\n            loading: true,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_BOOKS_REQUEST':\r\n            return {\r\n                books: [],\r\n                loading: true,\r\n                error: null\r\n            };\r\n    \r\n        case 'FETCH_BOOKS_SUCCESS':\r\n            return {\r\n                books: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n    \r\n        case 'FETCH_BOOKS_FAILURE':\r\n            return {\r\n                books: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n    \r\n        default:\r\n            return state.bookList;\r\n    }\r\n};\r\n\r\n\r\nconst updateShoppingCart = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        \r\n    }\r\n\r\n    switch(action.type) {\r\n        case 'BOOK_ADDED_TO_CART':\r\n            return updateOrder(state, action.payload, 1);\r\n    \r\n        case 'BOOK_REMOVED_FROM_CART':\r\n            return updateOrder(state, action.payload, -1);\r\n    \r\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n            const item = state.shoppingCart.cartItems.find(({id}) => id === action.payload);\r\n            return updateOrder(state, action.payload, -item.count);\r\n    \r\n        default:\r\n            return state.shoppingCart;\r\n    }\r\n};\r\n\r\nconst reducer = (state , action) => {\r\n\r\n    console.log(action.type)\r\n\r\n    return {\r\n        bookList: updateBookList(state, action),\r\n        shoppingCart: updateShoppingCart(state, action)\r\n    }\r\n}\r\n\r\nexport default reducer;            \r\n        // case 'FETCH_BOOKS_REQUEST':\r\n        //     return {\r\n        //         ...state, // copy this current state and change other  \r\n        //         books: [],\r\n        //         loading: true,\r\n        //         error: null\r\n        //     };\r\n        // case 'FETCH_BOOKS_SUCCESS':\r\n        //     return {\r\n        //         ...state,\r\n        //         books: action.payload,\r\n        //         loading: false,\r\n        //         error: null\r\n        //     };\r\n\r\n        // case 'FETCH_BOOKS_FAILURE':\r\n        //     return {\r\n        //         ...state,\r\n        //         books: [],\r\n        //         loading: false,\r\n        //         error: action.payload\r\n        //     }  \r\n\r\n        // case'BOOK_ADDED_TO_CART':\r\n        // return  (\r\n        //     updateOrder(state, action.payload, 1)\r\n        // )\r\n        \r\n            // const bookId = action.payload;\r\n            // const book = state.books.find((book) => book.id === bookId);\r\n            // const itemIndex = state.cartItems.findIndex((book) => book.id === bookId)\r\n            // const item = state.cartItems[itemIndex]\r\n            \r\n            // const newItem =  updateCartItem (book, item)\r\n            \r\n            //     return {\r\n            //         ...state,\r\n            //         cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\r\n            //     }\r\n\r\n        // case'BOOK_REMOVED_FROM_CART':\r\n        // return (\r\n        //     updateOrder(state, action.payload, -1)\r\n        // )\r\n\r\n        \r\n        // case'ALL_BOOKS_REMOVED_FROM_CART':\r\n        // const item = state.cartItems.find((book) => book.id === action.payload)\r\n        // return (\r\n        //     updateOrder(state, action.payload, -item.count)\r\n        // )\r\n"]},"metadata":{},"sourceType":"module"}