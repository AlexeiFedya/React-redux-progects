{"ast":null,"code":"var _jsxFileName = \"F:\\\\React-redux-progects\\\\redux-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport BookListItem from '../book-list-item/book-list-item';\nimport withBookstoreService from '../hoc/with-bookstore-service';\nimport { booksLoaded, booksReuested, booksError } from '../../actions/actions';\nimport compose from '../../utils/compose';\nimport Loader from '../loader/loader';\nimport ErrorIndicator from '../error-indicator/error-indicator';\nimport './book-list.css';\n\nclass BookList extends React.Component {\n  componentDidMount() {\n    //1 receive data (получить данные)\n    const {\n      bookstoreService,\n      booksLoaded,\n      booksReuested,\n      booksError\n    } = this.props;\n  } // componentDidMount () {\n  //     //1 receive data (получить данные)\n  //     const { bookstoreService,\n  //             booksLoaded,\n  //             booksReuested,\n  //             booksError} = this.props\n  //     booksReuested() // loading \n  //     bookstoreService.getBooks()\n  //         .then((data) => {\n  //             booksLoaded(data)\n  //         })\n  //         .catch((err) => booksError(err))\n  //     // 2 передать действия в стор\n  //     // this.props.booksLoaded(data);\n  // }\n\n\n  render() {\n    const {\n      books,\n      loading,\n      error\n    } = this.props;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 20\n        }\n      });\n    }\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(ErrorIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"book-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, books.map(book => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: book.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(BookListItem, {\n        book: book,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 33\n        }\n      }));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books,\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBooks: () => {\n      dispatch(booksReuested()); // loading \n\n      bookstoreService.getBooks().then(data => {\n        booksLoaded(data);\n      }).catch(err => booksError(err));\n    }\n  };\n}; // const mapDispatchToProps = { // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\n//     booksLoaded,\n//     booksReuested,\n//     booksError\n// }\n// const mapDispatchToProps = (dispatch) => {\n//     return (\n//         bindActionCreators ({\n//             booksLoaded\n//         }, dispatch)\n//     )\n// }\n// export default withBookstoreService()(\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\n\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookList);","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/components/book-list/book-list.js"],"names":["React","connect","BookListItem","withBookstoreService","booksLoaded","booksReuested","booksError","compose","Loader","ErrorIndicator","BookList","Component","componentDidMount","bookstoreService","props","render","books","loading","error","map","book","id","mapStateToProps","state","mapDispatchToProps","dispatch","fetchBooks","getBooks","then","data","catch","err"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,UAApC,QAAqD,uBAArD;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,iBAAP;;AAEA,MAAMC,QAAN,SAAwBV,KAAK,CAACW,SAA9B,CAAwC;AAEpCC,EAAAA,iBAAiB,GAAI;AACb;AACA,UAAM;AAAEC,MAAAA,gBAAF;AACET,MAAAA,WADF;AAEEC,MAAAA,aAFF;AAGEC,MAAAA;AAHF,QAGgB,KAAKQ,KAH3B;AAIF,GAR8B,CAUpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA0B,KAAKJ,KAArC;;AAEA,QAAIG,OAAJ,EAAa;AACT,0BAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,QAAIC,KAAJ,EAAW;AACP,0BAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AAED,wBACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AAChB,0BACI;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAED,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH,KAND,CAFR,CADJ;AAaH;;AApDmC;;AAuDxC,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHP,IAAAA,KAAK,EAAEO,KAAK,CAACP,KADV;AAEHC,IAAAA,OAAO,EAAEM,KAAK,CAACN,OAFZ;AAGHC,IAAAA,KAAK,EAAEK,KAAK,CAACL;AAHV,GAAP;AAKH,CAND;;AAQA,MAAMM,kBAAkB,GAAIC,QAAD,IAAiB;AACpC,SAAO;AACHC,IAAAA,UAAU,EAAE,MAAM;AACdD,MAAAA,QAAQ,CAACpB,aAAa,EAAd,CAAR,CADc,CACY;;AAC1BQ,MAAAA,gBAAgB,CAACc,QAAjB,GACKC,IADL,CACWC,IAAD,IAAU;AACZzB,QAAAA,WAAW,CAACyB,IAAD,CAAX;AACH,OAHL,EAIKC,KAJL,CAIYC,GAAD,IAASzB,UAAU,CAACyB,GAAD,CAJ9B;AAKH;AARE,GAAP;AAUH,CAXL,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,eAAexB,OAAO,CAClBJ,oBAAoB,EADF,EAElBF,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAFW,CAAP,CAGRd,QAHQ,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport BookListItem from '../book-list-item/book-list-item'\r\nimport withBookstoreService from '../hoc/with-bookstore-service'\r\nimport {booksLoaded, booksReuested, booksError} from '../../actions/actions'\r\nimport compose from '../../utils/compose'\r\nimport Loader from '../loader/loader'\r\nimport ErrorIndicator from '../error-indicator/error-indicator'\r\n\r\nimport './book-list.css'\r\n\r\nclass BookList  extends React.Component {\r\n\r\n    componentDidMount () {\r\n            //1 receive data (получить данные)\r\n            const { bookstoreService,\r\n                    booksLoaded,\r\n                    booksReuested,\r\n                    booksError} = this.props\r\n         }\r\n\r\n    // componentDidMount () {\r\n    //     //1 receive data (получить данные)\r\n    //     const { bookstoreService,\r\n    //             booksLoaded,\r\n    //             booksReuested,\r\n    //             booksError} = this.props\r\n    //     booksReuested() // loading \r\n    //     bookstoreService.getBooks()\r\n    //         .then((data) => {\r\n    //             booksLoaded(data)\r\n    //         })\r\n    //         .catch((err) => booksError(err))\r\n\r\n\r\n    //     // 2 передать действия в стор\r\n    //     // this.props.booksLoaded(data);\r\n    // }\r\n\r\n    render() {\r\n\r\n        const {books, loading, error} = this.props\r\n\r\n        if (loading) {\r\n            return <Loader/>\r\n        }\r\n        if (error) {\r\n            return <ErrorIndicator/>\r\n        }\r\n\r\n        return(\r\n            <ul className=\"book-list\">\r\n                {\r\n                    books.map((book) => {\r\n                        return (\r\n                            <li key={book.id}>\r\n                                <BookListItem book={book} />\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        books: state.books,\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ) =>  {\r\n        return {\r\n            fetchBooks: () => {\r\n                dispatch(booksReuested()) // loading \r\n                bookstoreService.getBooks()\r\n                    .then((data) => {\r\n                        booksLoaded(data)\r\n                    })\r\n                    .catch((err) => booksError(err))\r\n            }\r\n        }\r\n    }\r\n\r\n// const mapDispatchToProps = { // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\r\n//     booksLoaded,\r\n//     booksReuested,\r\n//     booksError\r\n// }\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return (\r\n//         bindActionCreators ({\r\n//             booksLoaded\r\n//         }, dispatch)\r\n//     )\r\n// }\r\n\r\n// export default withBookstoreService()(\r\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\r\n\r\nexport default compose(\r\n    withBookstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n    ) (BookList);"]},"metadata":{},"sourceType":"module"}