{"ast":null,"code":"const booksLoaded = newBooks => {\n  return {\n    type: 'FETCH_BOOKS_LOADED',\n    payload: newBooks\n  };\n};\n\nconst booksReuested = () => {\n  return {\n    type: 'FETCH_BOOKS_REQUEST'\n  };\n};\n\nconst booksError = error => {\n  return {\n    type: 'FETCH_BOOKS_ERROR',\n    payload: error\n  };\n};\n\nconst fetchBooks = (bookstoreService, dispatch) => () => {\n  dispatch(booksReuested());\n  bookstoreService.getBooks().then(data => {\n    dispatch(booksLoaded(data));\n  }).catch(err => dispatch(booksError(err)));\n};\n\nexport { fetchBooks };","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/actions/actions.js"],"names":["booksLoaded","newBooks","type","payload","booksReuested","booksError","error","fetchBooks","bookstoreService","dispatch","getBooks","then","data","catch","err"],"mappings":"AAAA,MAAMA,WAAW,GAAIC,QAAD,IAAc;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAE,oBADH;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,aAAa,GAAG,MAAM;AACxB,SAAO;AACHF,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMG,UAAU,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACHJ,IAAAA,IAAI,EAAE,mBADH;AAEHC,IAAAA,OAAO,EAAEG;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,UAAU,GAAG,CAACC,gBAAD,EAAmBC,QAAnB,KAAgC,MAAM;AACrDA,EAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACAI,EAAAA,gBAAgB,CAACE,QAAjB,GACKC,IADL,CACWC,IAAD,IAAU;AACZH,IAAAA,QAAQ,CAACT,WAAW,CAACY,IAAD,CAAZ,CAAR;AACH,GAHL,EAIKC,KAJL,CAIYC,GAAD,IAASL,QAAQ,CAACJ,UAAU,CAACS,GAAD,CAAX,CAJ5B;AAKH,CAPD;;AASA,SACIP,UADJ","sourcesContent":["const booksLoaded = (newBooks) => {\r\n    return {\r\n        type: 'FETCH_BOOKS_LOADED',\r\n        payload: newBooks\r\n    }\r\n}\r\n\r\nconst booksReuested = () => {\r\n    return {\r\n        type: 'FETCH_BOOKS_REQUEST'\r\n    }\r\n}\r\n\r\nconst booksError = (error) => {\r\n    return {\r\n        type: 'FETCH_BOOKS_ERROR',\r\n        payload: error\r\n    }\r\n}\r\n\r\nconst fetchBooks = (bookstoreService, dispatch) => () => {\r\n    dispatch(booksReuested()) \r\n    bookstoreService.getBooks()\r\n        .then((data) => {\r\n            dispatch(booksLoaded(data))\r\n        })\r\n        .catch((err) => dispatch(booksError(err)))\r\n}\r\n\r\nexport {\r\n    fetchBooks\r\n}"]},"metadata":{},"sourceType":"module"}