{"ast":null,"code":"const initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 220\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n  if (idx === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const {\n    id = book.id,\n    count = 0,\n    title = book.title,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  }; // if (item) {\n  //     return {\n  //         ...item,\n  //         count: item.count + 1,\n  //         total: item.total + book.price\n  //     }\n  // } else {\n  //     return {\n  //         id: book.id,\n  //         title: book.title,\n  //         count: 1,\n  //         total: book.price\n  //     }\n  // }\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const {\n    cartItems,\n    books\n  } = state;\n  const book = books.find(book => book.id === bookId);\n  const itemIndex = cartItems.findIndex(book => book.id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return { ...state,\n    cartItems: updateCartItems(cartItems, newItem, itemIndex)\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST':\n      return { ...state,\n        // copy this current state and change other  \n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n    // const bookId = action.payload;\n    // const book = state.books.find((book) => book.id === bookId);\n    // const itemIndex = state.cartItems.findIndex((book) => book.id === bookId)\n    // const item = state.cartItems[itemIndex]\n    // const newItem =  updateCartItem (book, item)\n    //     return {\n    //         ...state,\n    //         cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\n    //     }\n\n    case 'BOOK_REMOVED_FROM_CART':\n      retur;\n    // case'ALL_BOOKS_REMOVED_FROM_CART':\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/reducers/reducer.js"],"names":["initialState","books","loading","error","cartItems","orderTotal","updateCartItems","item","idx","slice","updateCartItem","book","quantity","id","count","title","total","price","updateOrder","state","bookId","find","itemIndex","findIndex","newItem","reducer","action","console","log","type","payload","retur"],"mappings":"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","sourcesContent":["const initialState = { \r\n    books: [],\r\n    loading: true,\r\n    error: null,\r\n    cartItems: [],\r\n    orderTotal: 220\r\n}\r\n\r\nconst updateCartItems = (cartItems, item, idx) => {\r\n    if (idx === -1){\r\n        return [\r\n            ...cartItems,\r\n            item\r\n        ]\r\n    }\r\n\r\n    return [\r\n        ...cartItems.slice(0,idx),\r\n        item,\r\n        ...cartItems.slice(idx + 1)\r\n    ]\r\n}\r\n\r\nconst updateCartItem = (book, item = {}, quantity) => {\r\n\r\n    const {id = book.id, \r\n        count = 0,\r\n        title = book.title,\r\n        total = 0} = item;\r\n\r\n    return {\r\n        id,\r\n        title,\r\n        count: count + quantity,\r\n        total: total + quantity*book.price\r\n    }\r\n\r\n            // if (item) {\r\n            //     return {\r\n            //         ...item,\r\n            //         count: item.count + 1,\r\n            //         total: item.total + book.price\r\n            //     }\r\n            // } else {\r\n            //     return {\r\n            //         id: book.id,\r\n            //         title: book.title,\r\n            //         count: 1,\r\n            //         total: book.price\r\n            //     }\r\n            // }\r\n}\r\n\r\nconst updateOrder = (state, bookId, quantity) => {\r\n\r\n    const { cartItems, books } =state\r\n            const book = books.find((book) => book.id === bookId);\r\n            const itemIndex = cartItems.findIndex((book) => book.id === bookId)\r\n            const item = cartItems[itemIndex]\r\n            \r\n            const newItem =  updateCartItem (book, item, quantity)\r\n            \r\n                return {\r\n                    ...state,\r\n                    cartItems: updateCartItems(cartItems, newItem, itemIndex)\r\n                }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    console.log(action.type)\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_BOOKS_REQUEST':\r\n            return {\r\n                ...state, // copy this current state and change other  \r\n                books: [],\r\n                loading: true,\r\n                error: null\r\n            };\r\n        case 'FETCH_BOOKS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                books: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n\r\n        case 'FETCH_BOOKS_FAILURE':\r\n            return {\r\n                ...state,\r\n                books: [],\r\n                loading: false,\r\n                error: action.payload\r\n            }  \r\n\r\n        case'BOOK_ADDED_TO_CART':\r\n        return  (\r\n            updateOrder(state, action.payload, 1)\r\n        )\r\n        \r\n            // const bookId = action.payload;\r\n            // const book = state.books.find((book) => book.id === bookId);\r\n            // const itemIndex = state.cartItems.findIndex((book) => book.id === bookId)\r\n            // const item = state.cartItems[itemIndex]\r\n            \r\n            // const newItem =  updateCartItem (book, item)\r\n            \r\n            //     return {\r\n            //         ...state,\r\n            //         cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\r\n            //     }\r\n\r\n         case'BOOK_REMOVED_FROM_CART':\r\n         retur\r\n\r\n        \r\n        // case'ALL_BOOKS_REMOVED_FROM_CART':\r\n\r\n        \r\n\r\n        default:\r\n          return state;\r\n      }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}