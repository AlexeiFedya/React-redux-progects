{"ast":null,"code":"var _jsxFileName = \"F:\\\\React-redux-progects\\\\redux-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport BookListItem from '../book-list-item/book-list-item';\nimport withBookstoreService from '../hoc/with-bookstore-service';\nimport { fetchBooks } from '../../actions/actions';\nimport compose from '../../utils/compose';\nimport Loader from '../loader/loader';\nimport ErrorIndicator from '../error-indicator/error-indicator';\nimport './book-list.css';\n\nconst BookList = ({\n  books,\n  onAddedToCart\n}) => {\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"book-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, books.map(book => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: book.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BookListItem, {\n      book: book,\n      onAddedToCart: () => onAddedToCart(book.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }\n    }));\n  }));\n};\n\nclass BookListContainer extends React.Component {\n  componentDidMount() {\n    this.props.fetchBooks();\n  } // componentDidMount () {\n  //     //1 receive data (получить данные)\n  //     const { bookstoreService,\n  //             booksLoaded,\n  //             booksReuested,\n  //             booksError} = this.props\n  //     booksReuested() // loading \n  //     bookstoreService.getBooks()\n  //         .then((data) => {\n  //             booksLoaded(data)\n  //         })\n  //         .catch((err) => booksError(err))\n  //     // 2 передать действия в стор\n  //     // this.props.booksLoaded(data);\n  // }\n\n\n  render() {\n    const {\n      books,\n      loading,\n      error\n    } = this.props;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 20\n        }\n      });\n    }\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(ErrorIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(BookList, {\n      books: books,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books,\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const {\n    bookstoreService\n  } = ownProps;\n  return {\n    fetchBooks: fetchBooks(bookstoreService, dispatch),\n    onAddedToCart: id => {\n      console.log('Added to cart', id);\n    }\n  };\n}; // const mapDispatchToProps = { // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\n//     booksLoaded,\n//     booksReuested,\n//     booksError\n// }\n// const mapDispatchToProps = (dispatch) => {\n//     return (\n//         bindActionCreators ({\n//             booksLoaded\n//         }, dispatch)\n//     )\n// }\n// export default withBookstoreService()(\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\n\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookListContainer);","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/components/book-list/book-list.js"],"names":["React","connect","BookListItem","withBookstoreService","fetchBooks","compose","Loader","ErrorIndicator","BookList","books","onAddedToCart","map","book","id","BookListContainer","Component","componentDidMount","props","render","loading","error","mapStateToProps","state","mapDispatchToProps","dispatch","ownProps","bookstoreService","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,iBAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAA4B;AACzC,sBACI;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAChB,wBACI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAED,IAApB;AAA0B,MAAA,aAAa,EAAE,MAAKF,aAAa,CAACE,IAAI,CAACC,EAAN,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH,GAND,CAFR,CADJ;AAaH,CAdD;;AAgBA,MAAMC,iBAAN,SAAiCd,KAAK,CAACe,SAAvC,CAAiD;AAE7CC,EAAAA,iBAAiB,GAAI;AACjB,SAAKC,KAAL,CAAWb,UAAX;AACH,GAJ4C,CAM7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAEAc,EAAAA,MAAM,GAAG;AAEL,UAAM;AAACT,MAAAA,KAAD;AAAQU,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA0B,KAAKH,KAArC;;AAEA,QAAIE,OAAJ,EAAa;AACT,0BAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,QAAIC,KAAJ,EAAW;AACP,0BAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AAED,wBACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEX,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAtC4C;;AAyCjD,MAAMY,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHb,IAAAA,KAAK,EAAEa,KAAK,CAACb,KADV;AAEHU,IAAAA,OAAO,EAAEG,KAAK,CAACH,OAFZ;AAGHC,IAAAA,KAAK,EAAEE,KAAK,CAACF;AAHV,GAAP;AAKH,CAND;;AAQA,MAAMG,kBAAkB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyB;AAC5C,QAAM;AAACC,IAAAA;AAAD,MAAqBD,QAA3B;AACA,SAAO;AACHrB,IAAAA,UAAU,EAAEA,UAAU,CAACsB,gBAAD,EAAmBF,QAAnB,CADnB;AAEHd,IAAAA,aAAa,EAAGG,EAAD,IAAQ;AACnBc,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4Bf,EAA5B;AACH;AAJE,GAAP;AAMH,CARL,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,eAAeR,OAAO,CAClBF,oBAAoB,EADF,EAElBF,OAAO,CAACoB,eAAD,EAAkBE,kBAAlB,CAFW,CAAP,CAGRT,iBAHQ,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport BookListItem from '../book-list-item/book-list-item'\r\nimport withBookstoreService from '../hoc/with-bookstore-service'\r\nimport { fetchBooks } from '../../actions/actions'\r\nimport compose from '../../utils/compose'\r\nimport Loader from '../loader/loader'\r\nimport ErrorIndicator from '../error-indicator/error-indicator'\r\n\r\nimport './book-list.css'\r\n\r\nconst BookList = ({books, onAddedToCart}) => {\r\n    return(\r\n        <ul className=\"book-list\">\r\n            {\r\n                books.map((book) => {\r\n                    return (\r\n                        <li key={book.id}>\r\n                            <BookListItem book={book} onAddedToCart={()=> onAddedToCart(book.id)}/>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nclass BookListContainer  extends React.Component {\r\n\r\n    componentDidMount () {\r\n        this.props.fetchBooks();\r\n    }\r\n\r\n    // componentDidMount () {\r\n    //     //1 receive data (получить данные)\r\n    //     const { bookstoreService,\r\n    //             booksLoaded,\r\n    //             booksReuested,\r\n    //             booksError} = this.props\r\n    //     booksReuested() // loading \r\n    //     bookstoreService.getBooks()\r\n    //         .then((data) => {\r\n    //             booksLoaded(data)\r\n    //         })\r\n    //         .catch((err) => booksError(err))\r\n\r\n\r\n    //     // 2 передать действия в стор\r\n    //     // this.props.booksLoaded(data);\r\n    // }\r\n\r\n    render() {\r\n\r\n        const {books, loading, error} = this.props\r\n\r\n        if (loading) {\r\n            return <Loader/>\r\n        }\r\n        if (error) {\r\n            return <ErrorIndicator/>\r\n        }\r\n\r\n        return (\r\n            <BookList books={books}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        books: state.books,\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) =>  {\r\n        const {bookstoreService} = ownProps\r\n        return {\r\n            fetchBooks: fetchBooks(bookstoreService, dispatch),\r\n            onAddedToCart: (id) => {\r\n                console.log('Added to cart',id)\r\n            } \r\n        }\r\n    }\r\n\r\n// const mapDispatchToProps = { // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\r\n//     booksLoaded,\r\n//     booksReuested,\r\n//     booksError\r\n// }\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return (\r\n//         bindActionCreators ({\r\n//             booksLoaded\r\n//         }, dispatch)\r\n//     )\r\n// }\r\n\r\n// export default withBookstoreService()(\r\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\r\n\r\nexport default compose(\r\n    withBookstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n    ) (BookListContainer);"]},"metadata":{},"sourceType":"module"}