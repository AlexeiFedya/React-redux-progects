{"ast":null,"code":"const updateShoppingCart = (state, action) => {\n  if (state === undefined) {\n    return {\n      cartItems: [],\n      orderTotal: 0\n    };\n  }\n\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n\n    case 'BOOK_REMOVED_FROM_CART':\n      return updateOrder(state, action.payload, -1);\n\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      const item = state.shoppingCart.cartItems.find(({\n        id\n      }) => id === action.payload);\n      return updateOrder(state, action.payload, -item.count);\n\n    default:\n      return state.shoppingCart;\n  }\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n  if (item.count === 0) {\n    return [...cartItems.slice(0, idx), ...cartItems.slice(idx + 1)];\n  }\n\n  if (idx === -1) {\n    return [...cartItems, item];\n  }\n\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const {\n    id = book.id,\n    count = 0,\n    title = book.title,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  }; // if (item) {\n  //     return {\n  //         ...item,\n  //         count: item.count + 1,\n  //         total: item.total + book.price\n  //     }\n  // } else {\n  //     return {\n  //         id: book.id,\n  //         title: book.title,\n  //         count: 1,\n  //         total: book.price\n  //     }\n  // }\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const {\n    shoppingCart: {\n      cartItems\n    },\n    bookList: {\n      books\n    }\n  } = state;\n  const book = books.find(book => book.id === bookId);\n  const itemIndex = cartItems.findIndex(book => book.id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return {\n    orderTotal: 220,\n    cartItems: updateCartItems(cartItems, newItem, itemIndex)\n  };\n};\n\nexport default updateShoppingCart;","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/reducers/shoppingCart.js"],"names":["updateShoppingCart","state","action","undefined","cartItems","orderTotal","type","updateOrder","payload","item","shoppingCart","find","id","count","updateCartItems","idx","slice","updateCartItem","book","quantity","title","total","price","bookId","bookList","books","itemIndex","findIndex","newItem"],"mappings":"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","sourcesContent":["const updateShoppingCart = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            cartItems: [],\r\n            orderTotal: 0\r\n        }\r\n    }\r\n\r\n    switch(action.type) {\r\n        case 'BOOK_ADDED_TO_CART':\r\n            return updateOrder(state, action.payload, 1);\r\n    \r\n        case 'BOOK_REMOVED_FROM_CART':\r\n            return updateOrder(state, action.payload, -1);\r\n    \r\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n            const item = state.shoppingCart.cartItems.find(({id}) => id === action.payload);\r\n            return updateOrder(state, action.payload, -item.count);\r\n    \r\n        default:\r\n            return state.shoppingCart;\r\n    }\r\n};\r\n\r\nconst updateCartItems = (cartItems, item, idx) => {\r\n    \r\n    if (item.count === 0){\r\n        return [\r\n            ...cartItems.slice(0,idx),\r\n            ...cartItems.slice(idx + 1)\r\n        ]\r\n    }\r\n\r\n    if (idx === -1){\r\n        return [\r\n            ...cartItems,\r\n            item\r\n        ]\r\n    }\r\n\r\n    return [\r\n        ...cartItems.slice(0,idx),\r\n        item,\r\n        ...cartItems.slice(idx + 1)\r\n    ]\r\n}\r\n\r\nconst updateCartItem = (book, item = {}, quantity) => {\r\n\r\n    const {\r\n        id = book.id, \r\n        count = 0,\r\n        title = book.title,\r\n        total = 0\r\n    } = item;\r\n\r\n    return {\r\n        id,\r\n        title,\r\n        count: count + quantity,\r\n        total: total + quantity*book.price\r\n    }\r\n\r\n            // if (item) {\r\n            //     return {\r\n            //         ...item,\r\n            //         count: item.count + 1,\r\n            //         total: item.total + book.price\r\n            //     }\r\n            // } else {\r\n            //     return {\r\n            //         id: book.id,\r\n            //         title: book.title,\r\n            //         count: 1,\r\n            //         total: book.price\r\n            //     }\r\n            // }\r\n}\r\n\r\n\r\n\r\nconst updateOrder = (state, bookId, quantity) => {\r\n\r\n    const { shoppingCart: {cartItems}, bookList: {books} } = state\r\n            const book = books.find((book) => book.id === bookId);\r\n            const itemIndex = cartItems.findIndex((book) => book.id === bookId)\r\n            const item = cartItems[itemIndex]\r\n            \r\n            const newItem =  updateCartItem (book, item, quantity)\r\n            \r\n                return {\r\n                    orderTotal: 220,\r\n                    cartItems: updateCartItems(cartItems, newItem, itemIndex)\r\n                }\r\n}\r\n\r\nexport default updateShoppingCart;"]},"metadata":{},"sourceType":"module"}