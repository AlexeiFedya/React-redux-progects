{"ast":null,"code":"var _jsxFileName = \"F:\\\\React-redux-progects\\\\redux-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport BookListItem from '../book-list-item/book-list-item';\nimport withBookstoreService from '../hoc/with-bookstore-service';\nimport { booksLoaded, booksReuested, booksError } from '../../actions/actions';\nimport compose from '../../utils/compose';\nimport Loader from '../loader/loader';\nimport './book-list.css';\n\nclass BookList extends React.Component {\n  componentDidMount() {\n    //1 receive data (получить данные)\n    const {\n      bookstoreService,\n      booksLoaded,\n      booksReuested\n    } = this.props;\n    booksReuested(); // loading \n\n    bookstoreService.getBooks().then(data => {\n      booksLoaded(data);\n    }); // 2 передать действия в стор\n    // this.props.booksLoaded(data);\n  }\n\n  render() {\n    const {\n      books,\n      loading\n    } = this.props;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"book-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, books.map(book => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: book.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(BookListItem, {\n        book: book,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 33\n        }\n      }));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = {\n  // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\n  booksLoaded,\n  booksReuested,\n  booksError\n}; // const mapDispatchToProps = (dispatch) => {\n//     return (\n//         bindActionCreators ({\n//             booksLoaded\n//         }, dispatch)\n//     )\n// }\n// export default withBookstoreService()(\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookList);","map":{"version":3,"sources":["F:/React-redux-progects/redux-store/src/components/book-list/book-list.js"],"names":["React","connect","BookListItem","withBookstoreService","booksLoaded","booksReuested","booksError","compose","Loader","BookList","Component","componentDidMount","bookstoreService","props","getBooks","then","data","render","books","loading","map","book","id","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,UAApC,QAAqD,uBAArD;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,QAAN,SAAwBT,KAAK,CAACU,SAA9B,CAAwC;AAEpCC,EAAAA,iBAAiB,GAAI;AACjB;AACA,UAAM;AAAEC,MAAAA,gBAAF;AACGR,MAAAA,WADH;AACgBC,MAAAA;AADhB,QACiC,KAAKQ,KAD5C;AAEAR,IAAAA,aAAa,GAJI,CAID;;AAChBO,IAAAA,gBAAgB,CAACE,QAAjB,GACKC,IADL,CACWC,IAAD,IAAU;AACZZ,MAAAA,WAAW,CAACY,IAAD,CAAX;AACH,KAHL,EALiB,CAWjB;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAmB,KAAKN,KAA9B;;AAEA,QAAIM,OAAJ,EAAa;AACT,0BAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AAED,wBACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAChB,0BACI;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAED,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH,KAND,CAFR,CADJ;AAaH;;AAtCmC;;AAyCxC,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHN,IAAAA,KAAK,EAAEM,KAAK,CAACN,KADV;AAEHC,IAAAA,OAAO,EAAEK,KAAK,CAACL;AAFZ,GAAP;AAIH,CALD;;AAOA,MAAMM,kBAAkB,GAAG;AAAE;AACzBrB,EAAAA,WADuB;AAEvBC,EAAAA,aAFuB;AAGvBC,EAAAA;AAHuB,CAA3B,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,eAAeC,OAAO,CAClBJ,oBAAoB,EADF,EAElBF,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAFW,CAAP,CAGRhB,QAHQ,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport BookListItem from '../book-list-item/book-list-item'\r\nimport withBookstoreService from '../hoc/with-bookstore-service'\r\nimport {booksLoaded, booksReuested, booksError} from '../../actions/actions'\r\nimport compose from '../../utils/compose'\r\nimport Loader from '../loader/loader'\r\n\r\nimport './book-list.css'\r\n\r\nclass BookList  extends React.Component {\r\n\r\n    componentDidMount () {\r\n        //1 receive data (получить данные)\r\n        const { bookstoreService,\r\n                 booksLoaded, booksReuested} = this.props\r\n        booksReuested() // loading \r\n        bookstoreService.getBooks()\r\n            .then((data) => {\r\n                booksLoaded(data)\r\n            })\r\n\r\n\r\n        // 2 передать действия в стор\r\n        // this.props.booksLoaded(data);\r\n    }\r\n\r\n    render() {\r\n\r\n        const {books, loading} = this.props\r\n\r\n        if (loading) {\r\n            return <Loader/>\r\n        }\r\n\r\n        return(\r\n            <ul className=\"book-list\">\r\n                {\r\n                    books.map((book) => {\r\n                        return (\r\n                            <li key={book.id}>\r\n                                <BookListItem book={book} />\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        books: state.books,\r\n        loading: state.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { // redux обернет booksLoaded в bindActionCreators и как только наш компонент будет вызывыть функция booksLoaded будет не только создаваться новое дейстие но оно будет сразу передоваться в dispatch и сразу же попадать в наш стор\r\n    booksLoaded,\r\n    booksReuested,\r\n    booksError\r\n}\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return (\r\n//         bindActionCreators ({\r\n//             booksLoaded\r\n//         }, dispatch)\r\n//     )\r\n// }\r\n\r\n// export default withBookstoreService()(\r\n//     connect(mapStateToProps, mapDispatchToProps) (BookList));\r\n\r\nexport default compose(\r\n    withBookstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n    ) (BookList);"]},"metadata":{},"sourceType":"module"}