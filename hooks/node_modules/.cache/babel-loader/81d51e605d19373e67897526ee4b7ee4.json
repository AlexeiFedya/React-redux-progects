{"ast":null,"code":"var _jsxFileName = \"F:\\\\React-redux-progects\\\\hooks\\\\src\\\\LiftingState.js\";\nimport React from 'react';\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 14\n      }\n    }, \"The water would boil.\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }\n  }, \"The water would not boil.\");\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.handleChange = e => {\n      this.props.onTemperatureChange(e.target.value);\n    };\n  }\n\n  render() {\n    const {\n      temperature,\n      scale\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, \"Enter temperature in \", scaleNames[scale], \":\"), /*#__PURE__*/React.createElement(\"input\", {\n      value: temperature,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nclass Calculator extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n\n    this.handleCelsiusChange = temperature => {\n      this.setState({\n        scale: 'c',\n        temperature\n      });\n    };\n\n    this.handleFahrenheitChange = temperature => {\n      this.setState({\n        scale: 'f',\n        temperature\n      });\n    };\n  }\n\n  render() {\n    const {\n      temperature,\n      scale\n    } = this.state; //   const scale = this.state.scale;\n    //   const temperature = this.state.temperature;\n\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TemperatureInput, {\n      scale: \"c\",\n      temperature: celsius,\n      onTemperatureChange: this.handleCelsiusChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TemperatureInput, {\n      scale: \"f\",\n      temperature: fahrenheit,\n      onTemperatureChange: this.handleFahrenheitChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(BoilingVerdict, {\n      celsius: parseFloat(celsius),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["F:/React-redux-progects/hooks/src/LiftingState.js"],"names":["React","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","BoilingVerdict","props","TemperatureInput","Component","state","handleChange","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","setState","handleFahrenheitChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst scaleNames = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit'\r\n  };\r\n  \r\n  function toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n  }\r\n  \r\n  function toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n  }\r\n  \r\n  function tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n      return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n  }\r\n  \r\n  function BoilingVerdict(props) {\r\n    if (props.celsius >= 100) {\r\n      return <p>The water would boil.</p>;\r\n    }\r\n    return <p>The water would not boil.</p>;\r\n  }\r\n  \r\n  class TemperatureInput extends React.Component {\r\n    \r\n    state = {\r\n        \r\n    }\r\n  \r\n    handleChange = (e) => {\r\n      this.props.onTemperatureChange(e.target.value);\r\n    }\r\n  \r\n    render() {\r\n        const {temperature, scale} = this.props;\r\n      \r\n      return (\r\n        <fieldset>\r\n          <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n          <input value={temperature}\r\n                 onChange={this.handleChange} />\r\n        </fieldset>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Calculator extends React.Component {\r\n    \r\n    state = {temperature: '', scale: 'c'};\r\n    \r\n  \r\n    handleCelsiusChange =(temperature) => {\r\n      this.setState({scale: 'c', temperature});\r\n    }\r\n  \r\n    handleFahrenheitChange =(temperature) => {\r\n      this.setState({scale: 'f', temperature});\r\n    }\r\n  \r\n    render() {\r\n         const {temperature, scale} = this.state;\r\n    //   const scale = this.state.scale;\r\n    //   const temperature = this.state.temperature;\r\n      const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\r\n      const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n  \r\n      return (\r\n        <div>\r\n          <TemperatureInput\r\n            scale=\"c\"\r\n            temperature={celsius}\r\n            onTemperatureChange={this.handleCelsiusChange} />\r\n          <TemperatureInput\r\n            scale=\"f\"\r\n            temperature={fahrenheit}\r\n            onTemperatureChange={this.handleFahrenheitChange} />\r\n          <BoilingVerdict\r\n            celsius={parseFloat(celsius)} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Calculator;"]},"metadata":{},"sourceType":"module"}